{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,cAI/B,IAAIC,EADJJ,EAAKC,KAAKI,iBAAiB,UAG3B,SAAsBC,GACpBA,EAAMC,iBACNH,EAAY,KAEZ,MAAMI,EAASC,OAAOT,EAAKC,KAAKS,SAASF,OAAOG,OAC1CC,EAAYH,OAAOT,EAAKC,KAAKS,SAASG,KAAKF,OAC3CG,EAAQL,OAAOT,EAAKC,KAAKS,SAASK,MAAMJ,OAE9CP,GAAaU,EACb,IAAIE,EAAU,EACVC,EAAU,KAEdC,YAAW,KACT,GAAIV,GAAU,GAAKI,EAAY,GAAKE,EAAQ,EAC1C,OAAOK,EAAArB,GAASsB,OAAOC,QACrB,iDAIJ,SAASC,IA6Bb,IAAuBC,EAAUR,GAAVQ,EA5BHP,EA4BaD,EA5BJH,EA6BpB,IAAIY,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EAAQ,C,SAAEF,EAAUR,MAAOX,IAG3BsB,EAAO,C,SAAEH,EAAUR,MAAOX,IAE5BA,GAAaW,CAAK,KArCbc,MAAK,EAACN,SAAEA,EAAQR,MAAEA,MACjBI,EAAArB,GAASsB,OAAOU,QACd,uBAAqBP,QAAiBR,MAAU,IAGnDgB,OAAM,EAACR,SAAEA,EAAQR,MAAEA,MAClBI,EAAArB,GAASsB,OAAOC,QACd,sBAAoBE,QAAeR,MAAU,IAGpC,IAAXP,IAGAQ,IAAYR,GACdwB,cAAcf,GAEhBD,I,CAEa,IAAXR,EACFc,KAEAA,IACAL,EAAUgB,YAAYX,EAAIV,G,GAE3BE,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form.form'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\nlet delayInfo;\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  delayInfo = null;\n\n  const amount = Number(refs.form.elements.amount.value);\n  const delayStep = Number(refs.form.elements.step.value);\n  const delay = Number(refs.form.elements.delay.value);\n\n  delayInfo += delay;\n  let current = 1;\n  let timerId = null;\n\n  setTimeout(() => {\n    if (amount <= 0 || delayStep < 0 || delay < 0) {\n      return Notiflix.Notify.failure(\n        'Delay fields must be positive, and amount > 0'\n      );\n    }\n\n    function go() {\n      createPromise(current, delayStep)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n      if (amount === 1) {\n        return;\n      }\n      if (current === amount) {\n        clearInterval(timerId);\n      }\n      current++;\n    }\n    if (amount === 1) {\n      go();\n    } else {\n      go();\n      timerId = setInterval(go, delayStep);\n    }\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay: delayInfo });\n    } else {\n      // Reject\n      reject({ position, delay: delayInfo });\n    }\n    delayInfo += delay;\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$delayInfo","addEventListener","event","preventDefault","amount","Number","elements","value","delayStep","step","delay1","delay","current","timerId","setTimeout","$parcel$interopDefault","Notify","failure","go","position","Promise","resolve","reject","Math","random","then","success","catch","clearInterval","setInterval"],"version":3,"file":"03-promises.b02da9e6.js.map"}